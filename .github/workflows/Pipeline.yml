name: Unit Testing, Coverage Collection, Package, Release, Documentation and Publish

on:
  push:
  workflow_dispatch:

jobs:

  Params:
    uses: pyTooling/Actions/.github/workflows/Params.yml@dev
    with:
      name: pySVModel

  UnitTesting:
    uses: pyTooling/Actions/.github/workflows/UnitTesting.yml@dev
    with:
      TestReport: true

  Coverage:
    uses: pyTooling/Actions/.github/workflows/CoverageCollection.yml@dev
    needs:
      - Params
    with:
      pyver: ${{ fromJson(needs.Params.outputs.params).pyver }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.coverage }}
    secrets:
      codacy_token: ${{ secrets.CODACY_PROJECT_TOKEN }}

  Release:
    name: üìù Create 'Release Page' on GitHub
    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags')
    needs:
      - UnitTesting
      - Coverage

    env:
      PYTHON: ${{ needs.Coverage.outputs.python }}
    outputs:
      python:     ${{ env.PYTHON }}
      tag:        ${{ steps.getVariables.outputs.gitTag }}
      version:    ${{ steps.getVariables.outputs.version }}
      datetime:   ${{ steps.getVariables.outputs.datetime }}
      upload_url: ${{ steps.createReleasePage.outputs.upload_url }}

    steps:
      - name: üîÅ Extract Git tag from GITHUB_REF
        id:   getVariables
        run: |
          GIT_TAG=${GITHUB_REF#refs/*/}
          RELEASE_VERSION=${GIT_TAG#v}
          RELEASE_DATETIME="$(date --utc '+%d.%m.%Y - %H:%M:%S')"
          # write to step outputs
          echo ::set-output name=gitTag::${GIT_TAG}
          echo ::set-output name=version::${RELEASE_VERSION}
          echo ::set-output name=datetime::${RELEASE_DATETIME}

      - name: üìë Create Release Page
        id:   createReleasePage
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.getVariables.outputs.gitTag }}
#          release_name: ${{ steps.getVariables.outputs.gitTag }}
          body: |
            **Automated Release created on: ${{ steps.getVariables.outputs.datetime }}**

            # New Features
            * tbd

            # Changes
            * tbd

            # Bug Fixes
            * tbd
          draft: false
          prerelease: false


  Package:
    name: üì¶ Package in Wheel Format
    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Coverage

    env:
      PYTHON:   ${{ needs.Coverage.outputs.python }}
      ARTIFACT: pySVModel-wheel
    outputs:
      python:   ${{ env.PYTHON }}
      artifact: ${{ env.ARTIFACT }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v2

      - name: üêç Setup Python ${{ env.PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: üîß Install dependencies for packaging and release
        run: |
          python -m pip install --upgrade pip
          pip install wheel

      - name: üî® Build Python package (source distribution)
        run: |
          python setup.py sdist

      - name: üî® Build Python package (binary distribution - wheel)
        run: |
          python setup.py bdist_wheel

      - name: üì§ Upload 'pySVModel' artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT }}
          path: dist/
          if-no-files-found: error
          retention-days: 1


  PublishOnPyPI:
    name: üöÄ Publish to PyPI
    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Package

    env:
      PYTHON:   ${{ needs.Package.outputs.python }}
      ARTIFACT: ${{ needs.Package.outputs.artifact }}
    outputs:
      python:   ${{ env.PYTHON }}
      artifact: ${{ env.ARTIFACT }}

    steps:
      - name: üì• Download artifacts '${{ env.ARTIFACT }}' from 'Package' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT }}
          path: dist/

      - name: üêç Setup Python ${{ env.PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: ‚öô Install dependencies for packaging and release
        run: |
          python -m pip install --upgrade pip
          pip install wheel twine

      - name: ‚§¥ Release Python package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*


#  VerifyDocs:
#    name: üëç Verify example snippets using Python 3.10
#    runs-on: ubuntu-latest
#
#    env:
#      PYTHON: "3.10"
#    outputs:
#      python: ${{ env.PYTHON }}
#
#    steps:
#      - name: ‚è¨ Checkout repository
#        uses: actions/checkout@v2
#
#      - name: ‚öô Setup GHDL
#        uses: ghdl/setup-ghdl-ci@master
#
#      - name: üêç Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ env.PYTHON }}
#
#      - name: üêç Install dependencies
#        run: |
#          pip3 install git+https://GitHub.com/ghdl/ghdl.git@$(ghdl version hash)
#
#      - name: ‚úÇ Extract code snippet from README
#        shell: python
#        run: |
#          from pathlib import Path
#          import re
#
#          ROOT = Path('.')
#
#          with (ROOT / 'README.md').open('r') as rptr:
#              content = rptr.read()
#
#          m = re.search(r"```py(thon)?(?P<code>.*?)```", content, re.MULTILINE|re.DOTALL)
#
#          if m is None:
#              raise Exception("Regular expression did not find the example in the README!")
#
#          with (ROOT / 'tests/docs/example.py').open('w') as wptr:
#              wptr.write(m["code"])
#
##      - name: Print example.py
##        run: cat tests/docs/example.py
#
#      - name: ‚òë Run example snippet
#        working-directory: tests/docs
#        run: |
#          python3 example.py


  BuildTheDocs:
    name: üìì Run BuildTheDocs and publish to GH-Pages
    runs-on: ubuntu-latest

#    needs:
#      - VerifyDocs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: üö¢ Build container image 'EDAA/doc'
        run: |
          docker build -t edaa/doc - <<-EOF
          FROM btdi/sphinx:featured
          RUN apk add -U --no-cache graphviz
          EOF

      - name: üõ≥Ô∏è Build documentation using container edaa/doc and publish to GitHub Pages
        uses: buildthedocs/btd@v0
        with:
          token: ${{ github.token }}

      - name: üì§ Upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: doc
          path: doc/_build/html


  ArtifactCleanUp:
    name: üóëÔ∏è Artifact Cleanup
    runs-on: ubuntu-latest

    needs:
      - Package
      - PublishOnPyPI

    env:
      ARTIFACT: ${{ needs.Package.outputs.artifact }}

    steps:
      - name: üóëÔ∏è Delete all Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            ${{ env.ARTIFACT }}
